package src.edu.erau.SE300_WW;

import java.awt.BorderLayout;
import java.awt.Panel;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.File;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;

import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JList;
import javax.swing.JOptionPane;
import javax.swing.SwingUtilities;

/**This class is responsible for obtaining messages that are available as well as showing them to the 
 * user and allowing the user to take appropriate action on the message. A student will only be able
 * to see whether or not their assignment has been approved or denied, and a teacher will only be
 * able to approve or deny an assignment. 
 * @author Nicholas Krawczyk
 *
 */
public class Messages {

	public String assignment;
	public String type;
	public Date date;
	public String course;
	public String recipient;
	public String sender;
	public String status;
	int howManyMessages; //The number of available messages for the currently logged in user
	
	/**
	 * Messages constructor populates the fields of a message from a given series of strings
	 * @param assignmentName: string containing the name of the assignment
	 * @param assignmentType: string containing the type of the assignment - Hw, Quiz, Exam
	 * @param dueDate: string containing the date the assignment is due
	 * @param assignmentCourse: string containing the course the assingment is due in
	 * @param to: string containing the name of the recipient of the message
	 * @param from: string containing the sender of the message
	 * @param messageStatus: string containing the status of the message - request, approved, denied
	 * @author Elisa
	 */
	public Messages (String assignmentName, String assignmentType, 
			Date dueDate, String assignmentCourse, String to, String from, String messageStatus){
		assignment = assignmentName;
		type = assignmentType;
		date = dueDate;
		course = assignmentCourse;
		recipient = to;
		sender = from;
		status = messageStatus;
	}
	
	public Messages(){
		//Please do not delete this- Nick
	}
	/**This method creates an array of Messages objects corresponding to messages for a 
	 * particular user.
	 * @return An array of Messages objects to be used to extract the components of the messages later
	 * @author Nicholas Krawczyk
	 */
	public Messages[] fetchMessages(){
		Database d = new Database(new File(LoginGUI.dataseFilePath));
		ArrayList<Messages> a=d.getMessages(LoginGUI.currentUserName);
		Messages[] receivedMessages=new Messages[a.size()];
		howManyMessages=a.size();
		for(int x=0;x<a.size();x++){
			receivedMessages[x]=a.get(x);
		}
		return receivedMessages;
		
	}
	
	/**Method to generate an array of all titles of all available messages from the database
	 * @param m Array of Messages previously generated by the fetchMessages() method
	 * @return An array of Strings containing all titles of available messages. Returns "No Messages" if there are none
	 * @author Nicholas Krawczyk
	 */
	public String[] createArrayOfMessagesTitles(Messages[] m){
		String[] temp= new String[howManyMessages]; 
		if(howManyMessages!=0){
			for(int x=0; x<howManyMessages;x++){
				temp[x]=m[x].assignment;
			}	
		}
		else{
			temp[0]="No messages.";
		}
		return temp;
	}
	//TODO: javadoc
	/**
	 * @author Nick
	 */
	public void openMessagesDisplay(){
        JFrame f = new JFrame();
        f.setTitle("Messages");
        f.setLayout(new BorderLayout());
        JButton openButton = new JButton("Open Selected Message");
        JButton deleteButton = new JButton("Delete Selected Message");
		
        Panel p = new Panel(new BorderLayout());
        p.add(openButton, BorderLayout.NORTH);
        p.add(deleteButton, BorderLayout.SOUTH);
        
        
        Messages[] m =fetchMessages();
		String[] data = createArrayOfMessagesTitles(m);
		JList list = new JList(data);
		f.add(list,BorderLayout.NORTH);
		f.add(p,BorderLayout.SOUTH);
		
		f.pack();
		f.setSize(400,235);
		f.setLocationRelativeTo(null);
		f.setVisible(true);
		
		openButton.addActionListener(new ActionListener(){
			@Override
			public void actionPerformed(ActionEvent arg0) {
				if(list.getSelectedValue()==null){
					JOptionPane.showMessageDialog(f, "No message was selected.","Error!",JOptionPane.ERROR_MESSAGE);
				}
				else if(list.getSelectedValue().equals("No messages to display.")){
					//Do nothing
				}
				else{
					if(LoginGUI.userType.equals("Student")){
						//Show message for a student. Only an indication if their assignment was approved or denied
						JOptionPane.showMessageDialog(f, "Your assignment "+ m[list.getSelectedIndex()].assignment +" on "+
					    new SimpleDateFormat("MM/dd/yyyy").format(m[list.getSelectedIndex()].date) + 
					    " has been "+ m[list.getSelectedIndex()].status+".", "Status of "+list.getSelectedValue() ,JOptionPane.INFORMATION_MESSAGE);

					}
					else{
						//Show message for a teacher. Will require them to approve or deny an assignment
						Object[] opts = {"Approve","Deny"};
						JOptionPane.showOptionDialog(f ,
								m[list.getSelectedIndex()].sender +" is requesting the assignment "+m[list.getSelectedIndex()].assignment+
								" on "+ new SimpleDateFormat("MM/dd/yyyy").format(m[list.getSelectedIndex()].date) +" for the course "+m[list.getSelectedIndex()].course+".", 
								"Assignment Verification: "+list.getSelectedValue() ,
								JOptionPane.INFORMATION_MESSAGE,
								JOptionPane.QUESTION_MESSAGE, null,opts,opts[0]);
								
					}
						
				}
				
			}
		});
		
		deleteButton.addActionListener(new ActionListener(){
			int positionToDelete=0;
			@Override
			public void actionPerformed(ActionEvent e) {
				if(list.getSelectedValue()==null){
					JOptionPane.showMessageDialog(f, "No message was selected.","Error!",JOptionPane.ERROR_MESSAGE);
				}
				else if(list.getSelectedValue().equals("No messages to display.")){
					//Do nothing
				}
				else{
					 positionToDelete=list.getSelectedIndex();
				int box = JOptionPane.showOptionDialog(f,"Are you sure you want to delete "+list.getSelectedValue()+"?", "Delete Message?",JOptionPane.YES_NO_OPTION,
						JOptionPane.INFORMATION_MESSAGE, 
				        null, new String[]{"Delete", "Cancel"}, e);
				if(box==JOptionPane.OK_OPTION){
					data[positionToDelete]="";
					if(data[0].equals("")){
						data[0]="No messages to display.";
					}
					SwingUtilities.updateComponentTreeUI(f);
				}
				}
				
			}
			
		});
	}
}
